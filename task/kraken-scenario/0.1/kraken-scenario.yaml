
---
kind: Task
apiVersion: tekton.dev/v1beta1
metadata:
  name: kraken-scenario
  labels:
    app.kubernetes.io/name: "kraken-scenario-task"
    tool: kraken
  annotations:
    tekton.dev/categories: Test
    tekton.dev/displayName: Start a kraken chaos test
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: kraken,chaos,test
spec:
  description: >-
    This `task` can be used to start a kraken chaos scenarios as part of a chaos pipeline.

    kraken chaos testing is a good way to execute chaos testing of openshift or kubernetes
    cluster as well as application running on top of it. This task allow you to use kraken 
    chaos scenarios as part of your application testing pipeline. It can also be part of
    a complete chaos pipeline for your infrastructure layer.
  params:
    - name: awsCredentialSecret
      type: string
      description: Name of the secret key holding the aws-credentials (mandatory but used only for aws infrastructure chaos test).
      default: kraken-aws-creds
    - name: serviceAccount
      type: string
      description: Name of the serviceAccount running the kraken task.
      default: kraken
  steps:
    - image: quay.io/chaos-kubox/krkn
      serviceAccount: $(params.serviceAccount)
      args:
        - python3 run_kraken.py -c config/config.yaml
      command:
        - /bin/sh
        - -c
      env:
        - name: KUBECONFIG
      envFrom:
        - secretRef:
            name: $(params.awsCredentialSecret)
      resources: {}
      securityContext:
        privileged: true
  workspaces:
    - name: kraken-kubeconfig
      description: The kubeconfig configuration file of the targeted cluster
      mountPath: /root/.kube
    - name: kraken-config
      description: The kraken configuration file defining the chaos scenario to run
      mountPath: /root/kraken/config
    - name: kraken-common
      description: The kraken common configuration files related to the chaos configuration
      mountPath: /root/kraken/common
  results:
    - name: report
      description: The final report of the chaos test




















---
kind: Task
apiVersion: tekton.dev/v1beta1
metadata:
  name: cerberus-check
  namespace: "{{- $namespace -}}"
  labels:
    app.kubernetes.io/name: "cerberus-check-task"
    tool: cerberus
  annotations:
    tekton.dev/categories: Test
    tekton.dev/displayName: Execute a cerberus check
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: cerberus,chaos,test
spec:
  description: >-
    The cerberus-check `task`` execute periodic check of a cerberus server and return
    a OK when cerberus signal is positive.

    Cerberus is a cluster watchdog who return health status of openshift or kubernetes
    cluster. This task allow you to check this signal as part of your chaos pipeline.
  params:
    - name: cerberus_server
      type: string
      description: Full URL to the cerberus server
      default: "http://cerberus:8080"
    - name: timeout
      type: string
      description: Timeout for the healthcheck performed against the cerberus server
      default: "60"
    - name: frequency
      type: string
      description: Frequency of the healthcheck in case of bad pulse
      default: "10"
  steps:
    - image: "quay.io/startx/fedora:latest"
      env:
        - name: CERBERUS_URL
          value: $(params.cerberus_server)
        - name: CERBERUS_TIMEOUT
          value: $(params.timeout)
        - name: CERBERUS_FREQUENCY
          value: $(params.frequency)
      script: |
        #!/usr/bin/env bash
        set -ex

        function checkCerberus {
          curl -s $1 | grep True &> /dev/null
          if [[ "$?" == "0" ]]; then
              echo "Cerberus check is OK at $1"
              return 0
         else
              echo "Cerberus check is KO at $1"
              return 1
          fi
        }

        function loopCheckCerberus {
          timeout=${2:-30}
          step=0
          increment=${3:-5}
          url=${1:-localhost}
          while [ $step -le $timeout ]
          do
            checkCerberus $url
            if [[ "$?" == "0" ]]; then
              exit 0;
            fi
            step=$(( $step + $increment ))
            sleep $increment
          done
          echo "Cerberus check reach ${timeout}s timeout limit"
        }

        echo "Check ${CERBERUS_URL} for ${CERBERUS_TIMEOUT} seconds"
        loopCheckCerberus "${CERBERUS_URL}" "${CERBERUS_TIMEOUT}" "${CERBERUS_FREQUENCY}"